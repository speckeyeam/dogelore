generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Comment       Comment[]
  Posts         Post[]
  sessions      Session[]
  folder        folder[]
  entry         entry[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id       String          @id @unique
  userId   String?
  title    String
  date     DateTime
  text     String?
  file     Boolean
  Comments Comment[]
  User     User?           @relation(fields: [userId], references: [id])
  Files    PostFiles[]
  Dislikes post_dislikes[]
  Likes    post_likes[]

  @@index([userId], map: "Post_userId_fkey")
}

model PostFiles {
  postFileName String
  id           String @id @unique @default(cuid())
  postId       String
  Post         Post   @relation(fields: [postId], references: [id])

  @@index([postId], map: "PostFiles_postId_fkey")
}

model Comment {
  id       String             @id @default(cuid())
  post_id  String
  reply    Boolean            @default(false)
  reply_to String?
  userId   String?
  text     String
  date     DateTime
  postId   String?
  Post     Post?              @relation(fields: [postId], references: [id])
  Reply    Comment?           @relation("replies", fields: [reply_to], references: [id])
  Replies  Comment[]          @relation("replies")
  User     User?              @relation(fields: [userId], references: [id])
  Dislikes comment_dislikes[]
  Likes    comment_likes[]

  @@index([reply_to], map: "Comment_reply_to_fkey")
  @@index([postId], map: "Comment_postId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model post_likes {
  id     String @unique
  postId String
  Post   Post   @relation(fields: [postId], references: [id])

  @@index([postId], map: "post_likes_postId_fkey")
}

model post_dislikes {
  id     String @unique
  postId String
  Post   Post   @relation(fields: [postId], references: [id])

  @@index([postId], map: "post_dislikes_postId_fkey")
}

model comment_likes {
  id        String  @unique
  commentId String
  Comment   Comment @relation(fields: [commentId], references: [id])

  @@index([commentId], map: "comment_likes_commentId_fkey")
}

model comment_dislikes {
  id        String  @unique
  commentId String
  Comment   Comment @relation(fields: [commentId], references: [id])

  @@index([commentId], map: "comment_dislikes_commentId_fkey")
}

model folder {
  id      Int      @unique @default(autoincrement())
  parent  Int      @default(0)
  title   String
  entries entry[]
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
}

model entry {
  id       String   @unique
  title    String
  folderId Int
  user     User     @relation(fields: [userId], references: [id])
  folder   folder   @relation(fields: [folderId], references: [id])
  userId   String
  date     DateTime
}
