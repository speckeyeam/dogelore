// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Posts         Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id       String          @id @unique
  User     User?           @relation(fields: [userId], references: [id])
  userId   String?
  title    String
  date     DateTime
  text     String?
  file     Boolean
  Likes    post_likes[]
  Dislikes post_dislikes[]
  Files    PostFiles[]
}

model PostFiles {
  postId       String @id @unique
  postFileName String
  Post         Post   @relation(fields: [postId], references: [id])
}

model Comment {
  id       String             @id @default(cuid())
  post_id  String
  User     User?              @relation(fields: [userId], references: [id])
  reply    Boolean            @default(false)
  reply_to String?
  userId   String?
  text     String
  date     DateTime
  Reply    Comment?           @relation("replies", fields: [reply_to], references: [id])
  Replies  Comment[]          @relation("replies")
  Likes    comment_likes[]
  Dislikes comment_dislikes[]
}

model post_likes {
  id     String @unique
  Post   Post?  @relation(fields: [postId], references: [id])
  postId String
}

model post_dislikes {
  id     String @unique
  Post   Post?  @relation(fields: [postId], references: [id])
  postId String
}

model comment_likes {
  id        String   @unique
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String
}

model comment_dislikes {
  id        String   @unique
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String
}

// model User {
//   id          String     @id @default(uuid())
//   email       String     @unique
//   password    String
//   username    String     @unique
//   sessions    Sessions[]
//   Post        Post[]
//   dateCreated String?
// }

// // model Sessions {
// //   sessionId  String @id @default(uuid())
// //   expiration String
// //   userId     String
// //   User       User   @relation(fields: [userId], references: [id])

// //   @@index([userId], map: "SessionId_userId_fkey")
// // }

// model Post {
//   id     Int     @id @unique @default(autoincrement())
//   User   User?   @relation(fields: [userId], references: [id])
//   userId String?
//   type   Boolean
// }

// model Admin {
//   id        Int     @id @unique @default(autoincrement())
//   userId    String?
//   dateAdded String?
// }

//maybe have a folder for each post, storing each of the images, labeled 1 through max
